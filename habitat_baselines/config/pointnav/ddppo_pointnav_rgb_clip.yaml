BASE_TASK_CONFIG_PATH: "configs/tasks/pointnav_gibson_v2.yaml"
TRAINER_NAME: "ddppo"
ENV_NAME: "NavRLEnv"
SENSORS: ["RGB_SENSOR"]

NUM_ENVIRONMENTS: 20
TOTAL_NUM_STEPS: 2.5e8
NUM_UPDATES: -1
CMD_TRAILING_OPTS: ["TASK_CONFIG.ENVIRONMENT.ITERATOR_OPTIONS.MAX_SCENE_REPEAT_STEPS", "50000"]
FORCE_TORCH_SINGLE_THREADED: True

LOG_INTERVAL: 10
LOG_FILE: "logs/pointnav-rgb-clip/train.log"
VIDEO_OPTION: ["tensorboard"]
TENSORBOARD_DIR: "logs/pointnav-rgb-clip/tb"

CHECKPOINT_FOLDER: "logs/pointnav-rgb-clip"
EVAL_CKPT_PATH_DIR: "logs/pointnav-rgb-clip"
NUM_CHECKPOINTS: 10
CHECKPOINT_INTERVAL: -1
EVAL_DURING_TRAIN: True
TEST_EPISODE_COUNT: -1
EVAL:
  USE_CKPT_CONFIG: False
  DEVICE: 'cpu'
  NUM_ENVIRONMENTS: 3
  SPLIT: val_mini

RL:
  SUCCESS_REWARD: 2.5

  POLICY:
    name: "PointNavResNetPolicy"

  PPO:
    # ppo params
    clip_param: 0.2
    ppo_epoch: 2
    num_mini_batch: 2
    value_loss_coef: 0.5
    entropy_coef: 0.01
    lr: 2.5e-4
    eps: 1e-5
    max_grad_norm: 0.2
    num_steps: 128
    use_gae: True
    gamma: 0.99
    tau: 0.95
    use_linear_clip_decay: False
    use_linear_lr_decay: False
    reward_window_size: 50

    use_normalized_advantage: False

    hidden_size: 512

    # Use double buffered sampling, typically helps
    # when environment time is similar or large than
    # policy inference time during rollout generation
    use_double_buffered_sampler: False

  DDPPO:
    sync_frac: 0.6
    # The PyTorch distributed backend to use
    distrib_backend: NCCL
    # Visual encoder backbone
    pretrained_weights: data/ddppo-models/gibson-2plus-resnet50.pth
    # Initialize with pretrained weights
    pretrained: False
    # Initialize just the visual encoder backbone with pretrained weights
    pretrained_encoder: False
    # Whether or not the visual encoder backbone will be trained.
    train_encoder: False
    # Whether or not to reset the critic linear layer
    reset_critic: True

    # Model parameters
    backbone: resnet50_clip_avgpool
    rnn_type: LSTM
    num_recurrent_layers: 2
